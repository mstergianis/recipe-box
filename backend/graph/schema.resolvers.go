package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"

	"gitlab.com/mstergianis/recipe-box/graph/model"
)

// AddRecipe is the resolver for the addRecipe field.
func (r *mutationResolver) AddRecipe(ctx context.Context, recipe *model.RecipeInput) (*model.Recipe, error) {
	return r.db.AddRecipe(recipe)
}

// Recipes is the resolver for the recipes field.
func (r *queryResolver) Recipes(ctx context.Context) ([]*model.Recipe, error) {
	return r.db.Recipes()
}

// Ingredients is the resolver for the ingredients field.
func (r *recipeResolver) Ingredients(ctx context.Context, obj *model.Recipe) ([]*model.Ingredient, error) {
	return r.db.RecipeIngredients(obj)
}

// Steps is the resolver for the steps field.
func (r *recipeResolver) Steps(ctx context.Context, obj *model.Recipe) ([]*model.Step, error) {
	return r.db.RecipeSteps(obj)
}

// Quantity is the resolver for the quantity field.
func (r *ingredientResolver) Quantity(ctx context.Context, obj *model.Ingredient) (*model.Quantity, error) {
	return r.db.IngredientQuantity(obj)
}

// Ingredient returns IngredientResolver implementation.
func (r *Resolver) Ingredient() IngredientResolver { return &ingredientResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Recipe returns RecipeResolver implementation.
func (r *Resolver) Recipe() RecipeResolver { return &recipeResolver{r} }

type ingredientResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type recipeResolver struct{ *Resolver }
